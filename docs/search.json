[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "warmup-sean-switzer",
    "section": "",
    "text": "This site is a warmup project for a future CSC324 website project. The following website will contain articles discussing past homework answers.\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#about-this-site",
    "href": "index.html#about-this-site",
    "title": "warmup-sean-switzer",
    "section": "",
    "text": "This site is a warmup project for a future CSC324 website project. The following website will contain articles discussing past homework answers.\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Recursive Recursion",
    "section": "",
    "text": "The following is the problem statement from chapter 3 of the text book Eloquent JavaScript 3rd edition (2018).\n\nWe’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:\nZero is even.\nOne is odd.\nFor any other number N, its evenness is the same as N - 2.\nDefine a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.\n\nThis solution looks to answer this problem in the best way possible."
  },
  {
    "objectID": "articles/article_02.html#creating-the-function",
    "href": "articles/article_02.html#creating-the-function",
    "title": "Recursive Recursion",
    "section": "Creating The Function",
    "text": "Creating The Function\nInitially we must create the function and name it isEven as directed then we need to give it the value num. We can do this as displayed below.\nfunction isEven(num)"
  },
  {
    "objectID": "articles/article_02.html#the-function-body",
    "href": "articles/article_02.html#the-function-body",
    "title": "Recursive Recursion",
    "section": "The Function Body",
    "text": "The Function Body\nWith the name and the function initialized we now need to work on the body of the function. The function body is the main process that will be used when the function is called.\nFirst we’ll start with an if statement, this first statement will check to see if the value of num is less than 0, if it is then it will change the value of num to be equal to isEven(num + 2) this enters into a recursive occurence where the value of num will continue to be increased by 2 and then re-entered into the isEven function until num is greater than 0.\n if (num &lt; 0) {\n        num = isEven(num + 2);\n    }\nOnce the value of num is greater than 0 the function will enter its first else statement. In which is held another if - else if - else statement.\nThe first part of this statement being an if statement that will check if the value of num is equal to 0, if it is then the value of num will be set to true.\n if (num == 0) {\n            num = true;\n }\nOtherwise the else if statement will check if the value of num equals 1, if this is true then num will be set to false. If both if statements are false then the function will continue to the final else statement.\nelse if (num == 1) {\n            num = false;\n        }\nIn the final else statement we see another recursive process in which the value of num is set to equal the value of isEven(num - 2) which will decrease the value of num by 2 then re-enter that value into the function until the value is equal to 0 or 1 in which the value of num will be true or false.\nelse {\n            num = isEven(num - 2);\n        }\nOnce the value of num is equal to 0 or 1 then the function will return the value of num which will be either true or false.\n return num;\nThe following is the full code for the function isEven that solves the above problem. Feel free to test it with any number!\nfunction isEven(num) {\n    if (num &lt; 0) {\n        num = isEven(num + 2);\n    } else {\n        if (num == 0) {\n            num = true;\n        } else if (num == 1) {\n            num = false;\n        } else {\n            num = isEven(num - 2);\n        }\n    }\n    return num;\n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Sean Switzer i’m a sophmore at georgetown college and am looking to major in software design and programming."
  },
  {
    "objectID": "about.html#introductions",
    "href": "about.html#introductions",
    "title": "About",
    "section": "",
    "text": "My name is Sean Switzer i’m a sophmore at georgetown college and am looking to major in software design and programming."
  },
  {
    "objectID": "about.html#background-and-today",
    "href": "about.html#background-and-today",
    "title": "About",
    "section": "Background and Today",
    "text": "Background and Today\nI was introduced to programming in a highschool engineering course, in which we started learning the C# language to use with vex robotics programming. Following this introduction I fell in love with programming and the many puzzles it provides, I went on to study javascript in an AP computer science course learning the history of computing, the use of binary, hexadecimal, and ascii. I started working on programs that could be run on mobile devices and programmed a basic time based clicker game. Now I am currently attending my third computer science class CSC 324 and looking to further my studies in the following semesters."
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "A Class Called Group",
    "section": "",
    "text": "This article will discuss a solution to a question from chapter 6 of Eloquent JavaScript 3rd edition (2018).\nThe following is the problem statement from the text book.\n\nWrite a class called Group (since Set is already taken). Like Set, it has add, delete, and has methods. Its constructor creates an empty group, add adds a value to the group (but only if it isn’t already a member), delete removes its argument from the group (if it was a member), and has returns a Boolean value indicating whether its argument is a member of the group."
  },
  {
    "objectID": "articles/article_01.html#creating-the-class",
    "href": "articles/article_01.html#creating-the-class",
    "title": "A Class Called Group",
    "section": "Creating the Class",
    "text": "Creating the Class\nFirst we initialize the class and name it group, within we set up the constructor and initialize an array setting it to be empty.\nclass group {\n    constructor () {\n        this.array = [];\n    }\n}"
  },
  {
    "objectID": "articles/article_01.html#similar-processes",
    "href": "articles/article_01.html#similar-processes",
    "title": "A Class Called Group",
    "section": "Similar Processes",
    "text": "Similar Processes\nThe following code and discussion will discuss areas of code that will be the same in all the following methods.\nFirst we set a variable named array and make it equal to this.array.\nlet array = this.array;\nwe then set a variable named included that is by default false, this variable will alow us to control whether the program will continue to run if the object is already in the array.\nlet included = false;\nThe first if statement of each method will subset the array to the variable i to see if the object in that place of the array is equal to the object that was entered into the add method, if it is it will set our variable included to be true. This allows each method to ensure that the object entered is or is not already in the array.\n if(array[i] == object) {\n            included = true;\n        }"
  },
  {
    "objectID": "articles/article_01.html#the-add-method",
    "href": "articles/article_01.html#the-add-method",
    "title": "A Class Called Group",
    "section": "The Add Method",
    "text": "The Add Method\nNext we’ll setup the add method. the add method will take an argument called object and should add that object to this.array the array that we initialized above while also ensuring that the object isn’t already in the array.\nadd(object) \nFirst we’ll set up our variables as discussed above.\nWe’ll then beggin to set up the main process of our add method with the for loop, the for loop takes the set variable i, which is set to equal 0, and applies it to an argument in this case it checks to see if i is less than the length of the array, if i is les the for loop will increment i by adding 1 to it, thus the i++, and will then allow the rest of the program to run. The for loop will then continue to check if its argument is true and running the program until i is greater then the length of the array.\nfor(let i = 0; i &lt; array.length; i++)\nWithin the for loop we will have an if statement with an if - else statement within it.\nThe first if statement will subset the array to the variable i to see if the object in that place of the array is equal to the object that was entered into the add method, if it is it will set our variable included to be true.\n if(array[i] == object) {\n            included = true;\n        }\nOur next statement the if - else statement will first check to see if our variable ’included” is true using its if statement, if it is it will use console.log to send a message in the console that will say the object “is already in the array”. If it finds that inlcuded is false then the else statement will occur and the object will be added to the array though the use of the .push command\n if(included = true) {\n        console.log(object + \" is already in the array\");\n    } else {\n        array.push(object)\n    }\nThe following is the full code for the add method.\n    add(object) {\n        let array = this.array;\n        let included = false;\n        for(let i = 0; i &lt; array.length; i++) {\n        if(array[i] == object) {\n            included = true;\n        }\n    } if(included = true) {\n        console.log(object + \" is already in the array\");\n    } else {\n        array.push(object)\n    }\n    }"
  },
  {
    "objectID": "articles/article_01.html#the-delete-method",
    "href": "articles/article_01.html#the-delete-method",
    "title": "A Class Called Group",
    "section": "The Delete Method",
    "text": "The Delete Method\nNext we need to construct the delete method, this method will check the array for the object given and remove it from the array if it exists. If not it will state that the object is not in the array.\nFirst as above we initialize the delete method.\ndelete(object) \nwe then set up the variables the same as we did with the add method, the reason for setting them up each time is to ensure the variables are at their base value for each method.\nnext we set up the for loop which is a bit different than the add method’s. This for loop uses this.array.length instead of the variable “array” this is because we’re going to be removing things from the array and need the total length to stay so the for loop can iterate.\nfor (let i = 0; i &lt; this.array.length; i++)\nfinally we get to the if statements, the first of which is the same for each method. The second satement however checks to see if included is true, using its if section, if included is true then the array is modified using .filter to remove the object by filtering the array to have all elements except object. If inlcuded is false we move to the else which sends a message to the console using console.log saying that the object “doesn’t exist in the array”.\n   if(included = true) {\n            array = array.filter( elem =&gt; elem !== object );\n        } else {\n            console.log(object + \" doesn't exist in the array\")\n        }\nbelow is the full code for the delete method.\n    delete(object) {\n        let array = this.array;\n        let included = false;\n        for (let i = 0; i &lt; this.array.length; i++) {\n            if(array[i] == object) {\n                included = true;\n            }\n        } if(included = true) {\n            array = array.filter( elem =&gt; elem !== object );\n        } else {\n            console.log(object + \" doesn't exist in the array\")\n        }\n    }"
  },
  {
    "objectID": "articles/article_01.html#the-has-method",
    "href": "articles/article_01.html#the-has-method",
    "title": "A Class Called Group",
    "section": "The Has Method",
    "text": "The Has Method\nFinally we have the has method which will check to see if the object exists within the array.\nThis method is fairly simple as it uses a for loop like the add method to check if the object is included with an if statement, if it is it will set included to true else inlcuded will be false it will then return the variable “inlcuded”.\n    has(object) {\n        let array = this.array;\n        let included = false;\n        for (let i = 0; i &lt; array.length; i++) {\n            if (array[i] == object) {\n                included = true;\n            }\n        }\n        return included;\n    }"
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "These two articles go in depth with my solutions to two of the homework assignments I had this semester.\nThe first article, “A Class called Group”, discusses the solution to a problem that uses a group and it’s methods to answer the problem.\nThe second article, “Recursive Recursion”, displays the use of recursive functions to solve the problem given in the homework assignment."
  }
]